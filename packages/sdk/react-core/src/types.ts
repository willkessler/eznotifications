import React, { ReactNode } from 'react';

export type SDKProviderProps = {
  children: ReactNode;
  domains?: string;
  environments?: string;
};

export type RestartPollingFunction = () => void;

// Define the return type of usePolling
export interface UsePollingReturnType {
  restartPolling: RestartPollingFunction;
}

export interface SDKConfig {
  apiKey: string; // required for the API, must be valid API key
  userId: string; // required for the API, autogenerated if not provided by client
  apiBaseUrl?: string;
  pageId?: string;
  environments?: string[];
  domains?: string[];
  mustBeDismissed? : boolean;        // Used to store a dashboard preference, not used by the SDK directly
  displayPastNotifications? : boolean;  // Used to store a dashboard preference, not used by the SDK directly
}

export interface SDKNotification {
  uuid: string,
  createdAt: Date,
  content: string;
  pageId?: string;
  notificationType: string;
  environments: [string];
  domains: [string];
  startDate?: Date;
  endDate?: Date;
  live: boolean;
  dismissed: boolean;
  // Only stored on return values from the SDK. The notifications table in the db doesn't have user_id on it
  // but it's added in return results to allow for dynamic user_id switching.
  userId?: string;
}

export interface SDKDataReturn {
  data: SDKNotification[];
  fetchPending: boolean;
  fetchError: string | null;
  dismiss: (notificationUuid: string) => Promise<boolean>;
  reset: () => Promise<boolean>;
}
