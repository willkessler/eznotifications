import React, { ReactNode } from 'react';

export enum ReactQueryAction {
  OK_AS_IS,
  REFRESH,
  INVALIDATE,
};

export type SDKProviderProps = {
  children: ReactNode;
};

export interface SDKConfig {
  apiKey: string; // required for the API, must be valid API key
  userId: string; // required for the API, autogenerated if not provided by client
  apiBaseUrl?: string;
  apiUrlString: string;
  pageId?: string;
  environment?: string;
}

export interface SDKNotification {
  uuid: string,
  createdAt: Date,
  content: string;
  pageId?: string;
  notificationType: string;
  environments: [string];
  startDate?: Date;
  endDate?: Date;
  live: boolean;
  dismissed: boolean;
}

export interface SDKDataReturn {
  data: SDKNotification[] | undefined;
  isPending: boolean;
  isError: boolean;
  error: any;
  getConfig: () => SDKConfig;
  dismiss: (notificationUuid: string) => Promise<boolean>;
  reset: () => Promise<boolean>;
  invalidate: () => void;
}
