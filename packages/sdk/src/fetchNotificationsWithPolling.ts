import { useQuery } from '@tanstack/react-query';
import { v4 as uuidv4 } from 'uuid';

interface FetchParams {
    userId?: string;
    pageId?: string;
    environments?: string[];
}

const useFetchData = (params: FetchParams) => {
    console.log('in useFetchData');

    // Function to get a cookie by name
    const getCookie = (name: string): string | null => {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        console.log(`Read back cookie: ${value}`);
        if (parts.length === 2) {
            const part = parts.pop();
            if (part) {
                return part.split(';').shift() || null;
            }
        }
        return null;
    };

    // Function to set a cookie
    const setCookie = (name: string, value: string, days: number) => {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = `; expires=${date.toUTCString()}`;
        const cookieValue = `${name}=${value}${expires}; path=/`;
        console.log(`Setting cookie to : ${cookieValue}`);
        document.cookie = cookieValue;
    };

    // Function to generate a UUID
    const generateUniqueId = (): string  => {
        return 'tinad_user_' + uuidv4(); // This will generate a random UUID
    };

    return useQuery({
        queryKey: ['notifications', params],
        queryFn: async () => {
            console.log('Fetching from API...');
            const url = new URL('http://localhost:5000/notifications');
            let userIdWasProvided = true;

            let userId = params.userId || getCookie('sdkUserId');
            if (!userId) {
                // If a userId was not passed in for this call, try to see if we previously
                // created one to use for this fetch; it will be stored in a cookie.
                // If not, generate one and store it in the cookie upon successful fetch.
                userId = generateUniqueId();
                console.log(`Generated user id ${userId}`);
                userIdWasProvided = false;
            }
            params.userId = userId; // ensure userId is included in params passed to the SDK

            Object.keys(params).forEach(key => {
                // Check if key is one of the known keys in FetchParams
                if (key === 'userId' || key === 'pageId' || key === 'environments') {
                    url.searchParams.append(key, params[key] as string); // Use type assertion safely
                }
                // Handle case for environments array
                if (key === 'environments') {
                    (params[key] as string[]).forEach(value => url.searchParams.append(key, value));
                }
            });
            
            // Fetch data from the API
            const response = await fetch(url, {
                headers: {
                    "Authorization" : "Bearer KB4seNru"
                }
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const results = response.json();
            console.log(`Got these results from the api: ${JSON.stringify(results,null,2)}`);

            // Set the userId cookie if it was generated by us (and not provided by the client)
            if (!userIdWasProvided && !getCookie('sdkUserId')) {
                setCookie('sdkUserId', userId, 365); // Set for 365 days for example
            }

            return results;
        },
        refetchInterval: 15000, // Polling interval
    });
};

export default useFetchData;
